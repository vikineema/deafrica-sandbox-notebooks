# pyproject.toml tells “frontend” build tools like pip and build what “backend” tool to use to create distribution packages for your project.

# using poetry for dependency management and packaging
[tool.poetry]
name = "deafrica-tools"
version = "1.0.5"
description = "Functions and algorithms for analysing Digital Earth Africa data."
authors = ["Digital Earth Africa <systems@digitalearthafrica.org>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "deafrica_tools"}]
homepage = "https://github.com/digitalearthafrica/deafrica-sandbox-notebooks"
repository = "https://github.com/digitalearthafrica/deafrica-sandbox-notebooks"
documentation = "https://docs.digitalearthafrica.org/fr/latest/sandbox/notebooks/Tools/index.html"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/digitalearthafrica/deafrica-sandbox-notebooks/issues"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# using setuptools for dependency management and packaging
#[build-system]
# requires is a list of packages that are needed to build your package. You don’t need to install them; build 
# frontends like pip will install them automatically in a temporary, isolated virtual environment for use 
# during the build process.
#requires = ["setuptools>=61.0","wheel"]
# build-backend is the name of the Python object that frontends will use to perform the build.
#build-backend = "setuptools.build_meta"
